<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgException_CollectionNotPrimitive" xml:space="preserve">
    <value>Collection '{0}' must contain a primitive type</value>
  </data>
  <data name="ArgException_FieldNotPrimitive" xml:space="preserve">
    <value>Field '{0}' must be a primitive type</value>
  </data>
  <data name="ArgException_InvalidCollection" xml:space="preserve">
    <value>Adding a value to an option that is not a collection</value>
  </data>
  <data name="ArgException_InvalidCollectionNoAdd" xml:space="preserve">
    <value>Collection identified without an Add method</value>
  </data>
  <data name="ArgException_InvalidTypeMultipleGenTypeParams" xml:space="preserve">
    <value>Expected only one Generic parameter type argument</value>
  </data>
  <data name="ArgException_InvalidTypeNoGeneric" xml:space="preserve">
    <value>Member must be a concrete type, not a generic type definition</value>
  </data>
  <data name="ArgException_NotPropertyOrField" xml:space="preserve">
    <value>Not a property or field</value>
  </data>
  <data name="ArgException_NotSettableProperty" xml:space="preserve">
    <value>Cannot set a non-writable property '{0}'</value>
  </data>
  <data name="ArgException_PropertyNotPrimitive" xml:space="preserve">
    <value>Property '{0}' must be a primitive type</value>
  </data>
  <data name="ArgException_ReadOnlyField" xml:space="preserve">
    <value>Cannot set a readonly field '{0}'</value>
  </data>
  <data name="ErrorParsingOption" xml:space="preserve">
    <value>Error parsing option '{0}'</value>
  </data>
  <data name="ErrorParsingOptionFormat" xml:space="preserve">
    <value>Wrong format '{0}' given to option '{1}'</value>
  </data>
  <data name="InternalError_OptionIsAlreadySet" xml:space="preserve">
    <value>Internal Error: Setting an option to false, when it's already set</value>
  </data>
  <data name="ListInvalidData" xml:space="preserve">
    <value>Invalid data after quoted list, expect '{0}' only</value>
  </data>
  <data name="ListMissingQuote" xml:space="preserve">
    <value>Missing quote in list</value>
  </data>
  <data name="LongOptionInvalidChar" xml:space="preserve">
    <value>Long option has invalid character: '{0}'</value>
  </data>
  <data name="LongOptionMayNotBeEmpty" xml:space="preserve">
    <value>Long Option may not be empty</value>
  </data>
  <data name="OptionArguments_AssignedMultipleTimes" xml:space="preserve">
    <value>OptionArgumentsAttribute assigned to multiple fields/properties</value>
  </data>
  <data name="OptionArguments_GenTypeString" xml:space="preserve">
    <value>OptionArgumentsAttribute collection must be type of string</value>
  </data>
  <data name="OptionArguments_RequiresCollection" xml:space="preserve">
    <value>OptionArgumentsAttribute must be assigned to a collection</value>
  </data>
  <data name="OptionIncorrectFormat" xml:space="preserve">
    <value>Option '{0}' has incorrect format</value>
  </data>
  <data name="OptionMissingArgument" xml:space="preserve">
    <value>Option '{0}' missing argument</value>
  </data>
  <data name="OptionMissingOption" xml:space="preserve">
    <value>Option '{0}' expected but not provided</value>
  </data>
  <data name="OptionMultipleTimes" xml:space="preserve">
    <value>Option '{0}' provided multiple times</value>
  </data>
  <data name="OptionMultipleTimesSpecified" xml:space="preserve">
    <value>Option '{0}' was specified multiple times</value>
  </data>
  <data name="OptionsStyleUnknown" xml:space="preserve">
    <value>Unknown Options Style</value>
  </data>
  <data name="OptionUnknown" xml:space="preserve">
    <value>Option '{0}' not recognized</value>
  </data>
  <data name="ShortOptionInvalidChar" xml:space="preserve">
    <value>Short option '{0}' character not allowed</value>
  </data>
  <data name="UnexpectedOptionNonZeroGeneralArgs" xml:space="preserve">
    <value>Unexpected option '{0}'</value>
  </data>
  <data name="UnexpectedOptionNonZeroGeneralArgsLastToken" xml:space="preserve">
    <value>Unexpected option '{0}' found, perhaps too many arguments after '{1}'</value>
  </data>
  <data name="UnexpectedValueForOption" xml:space="preserve">
    <value>Unexpected value for option '{0}'</value>
  </data>
  <data name="UnexpectedValueForOptionLastToken" xml:space="preserve">
    <value>Unexpected value for option '{0}' (argument '{1}')</value>
  </data>
  <data name="UnixCmdLineToken" xml:space="preserve">
    <value>Command line option {0} invalid, key value pairs must be isolated</value>
  </data>
</root>